{
  
    
        "post0": {
            "title": "Bird spaces classification",
            "content": ". gpu_info = !nvidia-smi gpu_info = &#39; n&#39;.join(gpu_info) if gpu_info.find(&#39;failed&#39;) &gt;= 0: print(&#39;Not connected to a GPU&#39;) else: print(gpu_info) . Mon Feb 7 16:45:36 2022 +--+ | NVIDIA-SMI 460.32.03 Driver Version: 460.32.03 CUDA Version: 11.2 | |-+-+-+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |===============================+======================+======================| | 0 Tesla P100-PCIE... Off | 00000000:00:04.0 Off | 0 | | N/A 48C P0 35W / 250W | 4207MiB / 16280MiB | 0% Default | | | | N/A | +-+-+-+ +--+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=============================================================================| +--+ . from google.colab import drive drive.mount(&#39;/content/drive&#39;) . Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(&#34;/content/drive&#34;, force_remount=True). . import os os.environ[&#39;KAGGLE_CONFIG_DIR&#39;] = &quot;/content/drive/MyDrive/Kaggle&quot; . %cd /content/drive/MyDrive/Kaggle . /content/drive/MyDrive/Kaggle . . . import torch import numpy as np # linear algebra import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv) from fastai.vision.all import * #from nbdev.showdoc import * set_seed(2) %matplotlib inline . path = Path(&#39;/content/drive/MyDrive/Kaggle&#39;) . bs = 16 # uncomment this line if you run out of memory even after clicking Kernel-&gt;Restart . birds = DataBlock(blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(seed=42), get_y=parent_label, item_tfms=Resize(460), batch_tfms=aug_transforms(size=224, min_scale=0.75)) dls = birds.dataloaders(path, valid_pct=0.2) . dls.show_batch(max_n=9, figsize=(9,6)) . print(dls.vocab) len(dls.vocab),dls.c . [&#39;AFRICAN CROWNED CRANE&#39;, &#39;AFRICAN FIREFINCH&#39;, &#39;ALBATROSS&#39;, &#39;ALEXANDRINE PARAKEET&#39;, &#39;AMERICAN AVOCET&#39;, &#39;AMERICAN BITTERN&#39;, &#39;AMERICAN COOT&#39;, &#39;AMERICAN GOLDFINCH&#39;, &#39;AMERICAN KESTREL&#39;, &#39;AMERICAN PIPIT&#39;, &#39;AMERICAN REDSTART&#39;, &#39;ANHINGA&#39;, &#39;ANNAS HUMMINGBIRD&#39;, &#39;ANTBIRD&#39;, &#39;ARARIPE MANAKIN&#39;, &#39;ASIAN CRESTED IBIS&#39;, &#39;BALD EAGLE&#39;, &#39;BALD IBIS&#39;, &#39;BALI STARLING&#39;, &#39;BALTIMORE ORIOLE&#39;, &#39;BANANAQUIT&#39;, &#39;BANDED BROADBILL&#39;, &#39;BANDED PITA&#39;, &#39;BAR-TAILED GODWIT&#39;, &#39;BARN OWL&#39;, &#39;BARN SWALLOW&#39;, &#39;BARRED PUFFBIRD&#39;, &#39;BAY-BREASTED WARBLER&#39;, &#39;BEARDED BARBET&#39;, &#39;BEARDED BELLBIRD&#39;, &#39;BEARDED REEDLING&#39;, &#39;BELTED KINGFISHER&#39;, &#39;BIRD OF PARADISE&#39;, &#39;BLACK &amp; YELLOW bROADBILL&#39;, &#39;BLACK BAZA&#39;, &#39;BLACK FRANCOLIN&#39;, &#39;BLACK SKIMMER&#39;, &#39;BLACK SWAN&#39;, &#39;BLACK TAIL CRAKE&#39;, &#39;BLACK THROATED BUSHTIT&#39;, &#39;BLACK THROATED WARBLER&#39;, &#39;BLACK VULTURE&#39;, &#39;BLACK-CAPPED CHICKADEE&#39;, &#39;BLACK-NECKED GREBE&#39;, &#39;BLACK-THROATED SPARROW&#39;, &#39;BLACKBURNIAM WARBLER&#39;, &#39;BLONDE CRESTED WOODPECKER&#39;, &#39;BLUE COAU&#39;, &#39;BLUE GROUSE&#39;, &#39;BLUE HERON&#39;, &#39;BLUE THROATED TOUCANET&#39;, &#39;BOBOLINK&#39;, &#39;BORNEAN BRISTLEHEAD&#39;, &#39;BORNEAN LEAFBIRD&#39;, &#39;BORNEAN PHEASANT&#39;, &#39;BRANDT CORMARANT&#39;, &#39;BROWN CREPPER&#39;, &#39;BROWN NOODY&#39;, &#39;BROWN THRASHER&#39;, &#39;BULWERS PHEASANT&#39;, &#39;CACTUS WREN&#39;, &#39;CALIFORNIA CONDOR&#39;, &#39;CALIFORNIA GULL&#39;, &#39;CALIFORNIA QUAIL&#39;, &#39;CANARY&#39;, &#39;CAPE GLOSSY STARLING&#39;, &#39;CAPE MAY WARBLER&#39;, &#39;CAPPED HERON&#39;, &#39;CAPUCHINBIRD&#39;, &#39;CARMINE BEE-EATER&#39;, &#39;CASPIAN TERN&#39;, &#39;CASSOWARY&#39;, &#39;CEDAR WAXWING&#39;, &#39;CERULEAN WARBLER&#39;, &#39;CHARA DE COLLAR&#39;, &#39;CHESTNET BELLIED EUPHONIA&#39;, &#39;CHIPPING SPARROW&#39;, &#39;CHUKAR PARTRIDGE&#39;, &#39;CINNAMON TEAL&#39;, &#39;CLARKS NUTCRACKER&#39;, &#39;COCK OF THE ROCK&#39;, &#39;COCKATOO&#39;, &#39;COLLARED ARACARI&#39;, &#39;COMMON FIRECREST&#39;, &#39;COMMON GRACKLE&#39;, &#39;COMMON HOUSE MARTIN&#39;, &#39;COMMON LOON&#39;, &#39;COMMON POORWILL&#39;, &#39;COMMON STARLING&#39;, &#39;COUCHS KINGBIRD&#39;, &#39;CRESTED AUKLET&#39;, &#39;CRESTED CARACARA&#39;, &#39;CRESTED NUTHATCH&#39;, &#39;CRIMSON SUNBIRD&#39;, &#39;CROW&#39;, &#39;CROWNED PIGEON&#39;, &#39;CUBAN TODY&#39;, &#39;CUBAN TROGON&#39;, &#39;CURL CRESTED ARACURI&#39;, &#39;D-ARNAUDS BARBET&#39;, &#39;DARK EYED JUNCO&#39;, &#39;DOUBLE BARRED FINCH&#39;, &#39;DOUBLE BRESTED CORMARANT&#39;, &#39;DOWNY WOODPECKER&#39;, &#39;EASTERN BLUEBIRD&#39;, &#39;EASTERN MEADOWLARK&#39;, &#39;EASTERN ROSELLA&#39;, &#39;EASTERN TOWEE&#39;, &#39;ELEGANT TROGON&#39;, &#39;ELLIOTS PHEASANT&#39;, &#39;EMPEROR PENGUIN&#39;, &#39;EMU&#39;, &#39;ENGGANO MYNA&#39;, &#39;EURASIAN GOLDEN ORIOLE&#39;, &#39;EURASIAN MAGPIE&#39;, &#39;EVENING GROSBEAK&#39;, &#39;FAIRY BLUEBIRD&#39;, &#39;FIRE TAILLED MYZORNIS&#39;, &#39;FLAME TANAGER&#39;, &#39;FLAMINGO&#39;, &#39;FRIGATE&#39;, &#39;GAMBELS QUAIL&#39;, &#39;GANG GANG COCKATOO&#39;, &#39;GILA WOODPECKER&#39;, &#39;GILDED FLICKER&#39;, &#39;GLOSSY IBIS&#39;, &#39;GO AWAY BIRD&#39;, &#39;GOLD WING WARBLER&#39;, &#39;GOLDEN CHEEKED WARBLER&#39;, &#39;GOLDEN CHLOROPHONIA&#39;, &#39;GOLDEN EAGLE&#39;, &#39;GOLDEN PHEASANT&#39;, &#39;GOLDEN PIPIT&#39;, &#39;GOULDIAN FINCH&#39;, &#39;GRAY CATBIRD&#39;, &#39;GRAY KINGBIRD&#39;, &#39;GRAY PARTRIDGE&#39;, &#39;GREAT GRAY OWL&#39;, &#39;GREAT KISKADEE&#39;, &#39;GREAT POTOO&#39;, &#39;GREATOR SAGE GROUSE&#39;, &#39;GREEN BROADBILL&#39;, &#39;GREEN JAY&#39;, &#39;GREEN MAGPIE&#39;, &#39;GREY PLOVER&#39;, &#39;GROVED BILLED ANI&#39;, &#39;GUINEA TURACO&#39;, &#39;GUINEAFOWL&#39;, &#39;GYRFALCON&#39;, &#39;HARLEQUIN DUCK&#39;, &#39;HARPY EAGLE&#39;, &#39;HAWAIIAN GOOSE&#39;, &#39;HELMET VANGA&#39;, &#39;HIMALAYAN MONAL&#39;, &#39;HOATZIN&#39;, &#39;HOODED MERGANSER&#39;, &#39;HOOPOES&#39;, &#39;HORNBILL&#39;, &#39;HORNED GUAN&#39;, &#39;HORNED LARK&#39;, &#39;HORNED SUNGEM&#39;, &#39;HOUSE FINCH&#39;, &#39;HOUSE SPARROW&#39;, &#39;HYACINTH MACAW&#39;, &#39;IMPERIAL SHAQ&#39;, &#39;INCA TERN&#39;, &#39;INDIAN BUSTARD&#39;, &#39;INDIAN PITTA&#39;, &#39;INDIAN ROLLER&#39;, &#39;INDIGO BUNTING&#39;, &#39;IWI&#39;, &#39;JABIRU&#39;, &#39;JAVA SPARROW&#39;, &#39;KAGU&#39;, &#39;KAKAPO&#39;, &#39;KILLDEAR&#39;, &#39;KING VULTURE&#39;, &#39;KIWI&#39;, &#39;KOOKABURRA&#39;, &#39;LARK BUNTING&#39;, &#39;LAZULI BUNTING&#39;, &#39;LILAC ROLLER&#39;, &#39;LONG-EARED OWL&#39;, &#39;MAGPIE GOOSE&#39;, &#39;MALABAR HORNBILL&#39;, &#39;MALACHITE KINGFISHER&#39;, &#39;MALAGASY WHITE EYE&#39;, &#39;MALEO&#39;, &#39;MALLARD DUCK&#39;, &#39;MANDRIN DUCK&#39;, &#39;MANGROVE CUCKOO&#39;, &#39;MARABOU STORK&#39;, &#39;MASKED BOOBY&#39;, &#39;MASKED LAPWING&#39;, &#39;MIKADO PHEASANT&#39;, &#39;MOURNING DOVE&#39;, &#39;MYNA&#39;, &#39;NICOBAR PIGEON&#39;, &#39;NOISY FRIARBIRD&#39;, &#39;NORTHERN CARDINAL&#39;, &#39;NORTHERN FLICKER&#39;, &#39;NORTHERN FULMAR&#39;, &#39;NORTHERN GANNET&#39;, &#39;NORTHERN GOSHAWK&#39;, &#39;NORTHERN JACANA&#39;, &#39;NORTHERN MOCKINGBIRD&#39;, &#39;NORTHERN PARULA&#39;, &#39;NORTHERN RED BISHOP&#39;, &#39;NORTHERN SHOVELER&#39;, &#39;OCELLATED TURKEY&#39;, &#39;OKINAWA RAIL&#39;, &#39;ORANGE BRESTED BUNTING&#39;, &#39;ORIENTAL BAY OWL&#39;, &#39;OSPREY&#39;, &#39;OSTRICH&#39;, &#39;OVENBIRD&#39;, &#39;OYSTER CATCHER&#39;, &#39;PAINTED BUNTIG&#39;, &#39;PALILA&#39;, &#39;PARADISE TANAGER&#39;, &#39;PARAKETT AKULET&#39;, &#39;PARUS MAJOR&#39;, &#39;PATAGONIAN SIERRA FINCH&#39;, &#39;PEACOCK&#39;, &#39;PELICAN&#39;, &#39;PEREGRINE FALCON&#39;, &#39;PHILIPPINE EAGLE&#39;, &#39;PINK ROBIN&#39;, &#39;POMARINE JAEGER&#39;, &#39;PUFFIN&#39;, &#39;PURPLE FINCH&#39;, &#39;PURPLE GALLINULE&#39;, &#39;PURPLE MARTIN&#39;, &#39;PURPLE SWAMPHEN&#39;, &#39;PYGMY KINGFISHER&#39;, &#39;QUETZAL&#39;, &#39;RAINBOW LORIKEET&#39;, &#39;RAZORBILL&#39;, &#39;RED BEARDED BEE EATER&#39;, &#39;RED BELLIED PITTA&#39;, &#39;RED BROWED FINCH&#39;, &#39;RED FACED CORMORANT&#39;, &#39;RED FACED WARBLER&#39;, &#39;RED FODY&#39;, &#39;RED HEADED DUCK&#39;, &#39;RED HEADED WOODPECKER&#39;, &#39;RED HONEY CREEPER&#39;, &#39;RED NAPED TROGON&#39;, &#39;RED TAILED HAWK&#39;, &#39;RED TAILED THRUSH&#39;, &#39;RED WINGED BLACKBIRD&#39;, &#39;RED WISKERED BULBUL&#39;, &#39;REGENT BOWERBIRD&#39;, &#39;RING-NECKED PHEASANT&#39;, &#39;ROADRUNNER&#39;, &#39;ROBIN&#39;, &#39;ROCK DOVE&#39;, &#39;ROSY FACED LOVEBIRD&#39;, &#39;ROUGH LEG BUZZARD&#39;, &#39;ROYAL FLYCATCHER&#39;, &#39;RUBY THROATED HUMMINGBIRD&#39;, &#39;RUDY KINGFISHER&#39;, &#39;RUFOUS KINGFISHER&#39;, &#39;RUFUOS MOTMOT&#39;, &#39;SAMATRAN THRUSH&#39;, &#39;SAND MARTIN&#39;, &#39;SANDHILL CRANE&#39;, &#39;SATYR TRAGOPAN&#39;, &#39;SCARLET CROWNED FRUIT DOVE&#39;, &#39;SCARLET IBIS&#39;, &#39;SCARLET MACAW&#39;, &#39;SCARLET TANAGER&#39;, &#39;SHOEBILL&#39;, &#39;SHORT BILLED DOWITCHER&#39;, &#39;SMITHS LONGSPUR&#39;, &#39;SNOWY EGRET&#39;, &#39;SNOWY OWL&#39;, &#39;SORA&#39;, &#39;SPANGLED COTINGA&#39;, &#39;SPLENDID WREN&#39;, &#39;SPOON BILED SANDPIPER&#39;, &#39;SPOONBILL&#39;, &#39;SPOTTED CATBIRD&#39;, &#39;SRI LANKA BLUE MAGPIE&#39;, &#39;STEAMER DUCK&#39;, &#39;STORK BILLED KINGFISHER&#39;, &#39;STRAWBERRY FINCH&#39;, &#39;STRIPED OWL&#39;, &#39;STRIPPED MANAKIN&#39;, &#39;STRIPPED SWALLOW&#39;, &#39;SUPERB STARLING&#39;, &#39;SWINHOES PHEASANT&#39;, &#39;TAIWAN MAGPIE&#39;, &#39;TAKAHE&#39;, &#39;TASMANIAN HEN&#39;, &#39;TEAL DUCK&#39;, &#39;TIT MOUSE&#39;, &#39;TOUCHAN&#39;, &#39;TOWNSENDS WARBLER&#39;, &#39;TREE SWALLOW&#39;, &#39;TROPICAL KINGBIRD&#39;, &#39;TRUMPTER SWAN&#39;, &#39;TURKEY VULTURE&#39;, &#39;TURQUOISE MOTMOT&#39;, &#39;UMBRELLA BIRD&#39;, &#39;VARIED THRUSH&#39;, &#39;VENEZUELIAN TROUPIAL&#39;, &#39;VERMILION FLYCATHER&#39;, &#39;VICTORIA CROWNED PIGEON&#39;, &#39;VIOLET GREEN SWALLOW&#39;, &#39;VULTURINE GUINEAFOWL&#39;, &#39;WALL CREAPER&#39;, &#39;WATTLED CURASSOW&#39;, &#39;WHIMBREL&#39;, &#39;WHITE BROWED CRAKE&#39;, &#39;WHITE CHEEKED TURACO&#39;, &#39;WHITE NECKED RAVEN&#39;, &#39;WHITE TAILED TROPIC&#39;, &#39;WHITE THROATED BEE EATER&#39;, &#39;WILD TURKEY&#39;, &#39;WILSONS BIRD OF PARADISE&#39;, &#39;WOOD DUCK&#39;, &#39;YELLOW BELLIED FLOWERPECKER&#39;, &#39;YELLOW CACIQUE&#39;, &#39;YELLOW HEADED BLACKBIRD&#39;, &#39;images to test&#39;] . (326, 326) . &lt;&gt; shows the difference between an image that has been zoomed, interpolated, rotated, and then interpolated again (which is the approach used by all other deep learning libraries), shown here on the right, and an image that has been zoomed and rotated as one operation and then interpolated just once on the left (the fastai approach), shown here on the left. . Training: resnet34 . learn = cnn_learner(dls, resnet34, metrics=error_rate) learn.fine_tune(2) . epoch train_loss valid_loss error_rate time . 0 | 1.281556 | 0.585761 | 0.146585 | 03:51 | . epoch train_loss valid_loss error_rate time . 0 | 0.611539 | 0.314773 | 0.080854 | 03:56 | . 1 | 0.308219 | 0.205119 | 0.050114 | 03:54 | . learn.model . Sequential( (0): Sequential( (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False) (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (2): ReLU(inplace=True) (3): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False) (4): Sequential( (0): BasicBlock( (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) (1): BasicBlock( (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) (2): BasicBlock( (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (5): Sequential( (0): BasicBlock( (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False) (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (downsample): Sequential( (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False) (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (1): BasicBlock( (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) (2): BasicBlock( (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) (3): BasicBlock( (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (6): Sequential( (0): BasicBlock( (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (downsample): Sequential( (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False) (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (1): BasicBlock( (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) (2): BasicBlock( (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) (3): BasicBlock( (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) (4): BasicBlock( (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) (5): BasicBlock( (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (7): Sequential( (0): BasicBlock( (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False) (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (downsample): Sequential( (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False) (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (1): BasicBlock( (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) (2): BasicBlock( (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) ) (1): Sequential( (0): AdaptiveConcatPool2d( (ap): AdaptiveAvgPool2d(output_size=1) (mp): AdaptiveMaxPool2d(output_size=1) ) (1): Flatten(full=False) (2): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (3): Dropout(p=0.25, inplace=False) (4): Linear(in_features=1024, out_features=512, bias=False) (5): ReLU(inplace=True) (6): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (7): Dropout(p=0.5, inplace=False) (8): Linear(in_features=512, out_features=326, bias=False) ) ) . Improving our model . learn = cnn_learner(dls, resnet34, metrics=error_rate) learn.lr_find(start_lr=1e-5, end_lr=1e1) . SuggestedLRs(valley=0.003311311127617955) . learn.fine_tune?? . learn = cnn_learner(dls, resnet34, metrics=error_rate) learn.fit_one_cycle(3, 3e-3) . epoch train_loss valid_loss error_rate time . 0 | 1.091636 | 0.601378 | 0.163981 | 03:48 | . 1 | 0.630284 | 0.308223 | 0.079371 | 03:49 | . 2 | 0.422914 | 0.247530 | 0.061184 | 03:47 | . learn.unfreeze() . learn.lr_find() . SuggestedLRs(valley=7.585775892948732e-05) . learn.fit_one_cycle(10, lr_max=9e-5) . epoch train_loss valid_loss error_rate time . 0 | 0.366718 | 0.241547 | 0.060986 | 03:55 | . 1 | 0.392569 | 0.264818 | 0.068202 | 03:57 | . 2 | 0.382351 | 0.240760 | 0.061085 | 03:54 | . 3 | 0.280636 | 0.220931 | 0.055056 | 03:55 | . 4 | 0.223109 | 0.198764 | 0.047346 | 03:54 | . 5 | 0.156686 | 0.174471 | 0.040130 | 03:54 | . 6 | 0.125461 | 0.163392 | 0.039439 | 03:54 | . 7 | 0.095606 | 0.158930 | 0.036276 | 03:54 | . 8 | 0.066164 | 0.154093 | 0.034200 | 03:54 | . 9 | 0.055492 | 0.152054 | 0.034398 | 03:54 | . learn.recorder.plot_loss() .",
            "url": "https://ddemoivre.github.io/blog/jupyter/2022/02/09/Image_classification.html",
            "relUrl": "/jupyter/2022/02/09/Image_classification.html",
            "date": " • Feb 9, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://ddemoivre.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://ddemoivre.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "I’m mathematician, I blog about machin learnig and modeling. .",
          "url": "https://ddemoivre.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ddemoivre.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}